if (Notification.permission == "denied") { /* nothing */ } else if (Notification.permission == "default") { Notification.requestPermission() } else { notifMuted = !notifMuted }        let notifMuted = false;

        let User;
        if (localStorage.getItem('user') == undefined) {
            window.location = '/editinfo';
        } else {
            User = JSON.parse(localStorage.getItem('user'));
        }
        console.log(User)

        if (localStorage.getItem('readrules') == undefined) {
            window.location = '/rules';
        }

        // Call this shit FedEx
        class MailSystemClass {
            constructor() {
                // this is where id put my shared mailing resources...

                // ...if i had any!!!
            }
        }

        class MailmanClass extends MailSystemClass {
            constructor(pkgtype, message, user, room) {
                super()
                this.pkgtype = pkgtype
                switch (this.pkgtype) {
                    case "message":
                    this.message = message;
                this.disName = user.disName;
                this.ugn = user.ugn;
                this.room = room;
                this.uuid = user.uuid;

                this.pkg = {
                    message: this.message,
                    sent: new Date(Date.now()),
                    room: this.room,
                    user: {
                        disName: this.disName,
                        ugn: this.ugn,
                        uuid: this.uuid,
                    }
                }
                    break;
                    case "join":
                this.disName = user.disName;
                this.ugn = user.ugn;
                this.room = room;
                this.uuid = user.uuid;

                this.pkg = {
                    room: this.room,
                    user: {
                        disName: this.disName,
                        ugn: this.ugn,
                        uuid: this.uuid,
                    }
                }
                    break;
                }
            }

            send() {
                switch (this.pkgtype) {
                    case "message":
                        socket.emit("messages", this.pkg);
                        break;
                    case "join":
                        socket.emit("join", this.pkg);
                        break;
                }
            }
        }

        class MailboxClass extends MailSystemClass {
            constructor() {
                super()
            }

            append(pkg) {
                $("#appendto").append(pkg);
                document.getElementById("appendto").scrollTo({
            top: document.getElementById("appendto").scrollHeight,
            left: 0,
            behavior: "smooth",
          });
            }

            sendNotif(pkg) {
                if (Notification.permission == 'granted' && !notifMuted == true) {
                    new Notification(pkg.user.disName + '@' + pkg.user.ugn, {'body': pkg.message})            
                }
            }
        }

        const socket = io();
        const MailSystem = new MailSystemClass();
        const Mailbox = new MailboxClass();

        let room = "::GENERAL"

        socket.on("connect", function (data) {
            let Mailman = new MailmanClass('join', '', User, room)
            Mailman.send();
        });

        
        document.getElementById("chatsubmit").onclick = function(e) {
          e.preventDefault();

        let message = $("#chat_input").val();

if (!message.replace(/\s/g, '').length) { /* empty */ } else {

        document.getElementById("chat_input").value = '';

          let Mailman = new MailmanClass('message', message, User, room)
          Mailman.send();
    }};

        $("#chat_input").keypress(function (e) {
    if(e.which === 13 && !e.shiftKey) {
        e.preventDefault();
    
        let message = $("#chat_input").val();

if (!message.replace(/\s/g, '').length) { /* empty */ } else {

        document.getElementById("chat_input").value = '';

          let Mailman = new MailmanClass('message', message, User, room)
          Mailman.send();
    }}
});

        socket.on("broad", function (data) {
          Mailbox.append(data);
        });

        socket.on("notification", function (data) {
          Mailbox.sendNotif(data);
        });
